{"version":3,"sources":["components/Card/Card.module.css","components/Cards/Cards.module.css","components/Card/Card.tsx","api/API.ts","redux/app-reducer.ts","redux/cards-reducer.ts","components/Cards/Cards.tsx","components/Header/Header.tsx","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx"],"names":["module","exports","Card","props","className","style","card","name","instance","axios","create","withCredentials","baseURL","headers","API","params","get","then","response","console","log","data","entities","initialState","status","isInitialized","SET_APP_STATUS","setAppStatusAC","type","SET_CARDS_LIST","fetchCardsTC","dispatch","res","cardsList","Cards","useDispatch","useEffect","thunk","cards","useSelector","state","map","id","Header","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","appState","action","composeEnhancers","window","compose","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wGACAA,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,MAAQ,uB,2JCEX,SAASC,EAAKC,GACzB,OAAO,qBAAKC,UAAWC,IAAMC,KAAtB,SACDH,EAAMI,O,6BCFVC,E,OAAWC,EAAMC,OAAO,CAC1BC,iBAAiB,EACjBC,QAAS,6CAETC,QAAS,KAGAC,EAAM,SACNC,GACL,OAAOP,EAASQ,IAAI,GAAI,CAACD,WACpBE,MAAK,SAAAC,GAEF,OADAC,QAAQC,IAAIF,EAASG,KAAKC,UACnBJ,EAASG,KAAKC,a,QCT/BC,EAAiC,CACnCC,OAAQ,UACRC,eAAe,GAsBbC,EAAiB,iBAIVC,EAAiB,SAACH,GAAD,MAA4B,CAClDI,KAAMF,EACNF,WCjCFK,EAAiB,iBAEjBN,EAA2B,GAwCpBO,EAAe,WACxB,OAAO,SAACC,GACJA,EAASJ,EAAe,YACxBb,EAAa,IACRG,MAAK,SAACe,GACHD,EAASJ,EAAe,cACxBI,EAtB+C,CAACH,KAAMC,EAAgBI,UAsB9CD,S,OC7CzB,SAASE,IAEpB,IAAMH,EAAWI,cAEjBC,qBAAU,WAEN,IAAMC,EAAQP,IACdC,EAASM,KACV,IAOH,IAAMC,EAAQC,aAAY,SAACC,GAAD,OAAgBA,EAAMP,aAShD,OAAO,qBAAK7B,UAAWC,IAAMiC,MAAtB,SAGCA,EAAMG,KAAI,SAACnC,GACP,OAAO,cAACJ,EAAD,CACMK,KAAMD,EAAKC,MADND,EAAKoC,SC1BxBC,MANf,WACI,OACI,8CCUOC,MATf,WACI,OACI,sBAAKxC,UAAU,MAAf,UACI,cAAC,EAAD,IACA,cAAC8B,EAAD,QCKGW,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB9B,MAAK,YAAkD,IAA/C+B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,eCFDO,EAAcC,YAAgB,CACvCC,SNQsB,WAAoF,IAAnFf,EAAkF,uDAAxDjB,EAAciC,EAA0C,uCAEzG,OAAQA,EAAO5B,MAEX,KAAKF,EACD,OAAO,2BACAc,GADP,IAEIhB,OAAQgC,EAAOhC,SAGvB,QACI,OAAOgB,IMlBfP,ULK4B,WAA4E,IAA3EO,EAA0E,uDAA1CjB,EAAciC,EAA4B,uCAEvG,OAAQA,EAAO5B,MAGX,KAAKC,EAGD,OAAO2B,EAAOvB,UAElB,QACI,OAAOO,MKXbiB,EAAmBC,OAAM,sCAA8DC,QACvFC,EAAQC,YACVR,EAEAI,EAAiBK,YAAgBC,OAQrCL,OAAOE,MAAQA,EAEAA,QCpBfI,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACI,cAAC,EAAD,QAGRO,SAASC,eAAe,SAM5BvB,M","file":"static/js/main.21ba1a36.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__2IIMs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cards\":\"Cards_cards__28Jlq\"};","import React from 'react';\r\nimport style from './Card.module.css'\r\n\r\nexport default function Card(props: any){\r\n    return <div className={style.card}>\r\n         {props.name}\r\n    </div>\r\n}","import axios from 'axios';\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: false,\r\n    baseURL: 'https://sclub.in.ua/actions/all/page/0/100',\r\n    // baseURL: 'https://neko-back.herokuapp.com/2.0',\r\n    headers: {}\r\n})\r\n\r\nexport const API = {\r\n    getCards(params: any) {\r\n        return instance.get('', {params})\r\n            .then(response => {\r\n                console.log(response.data.entities)\r\n                return response.data.entities\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n","\r\nexport type InitialStateType = {\r\n    status: AppStatusType\r\n    isInitialized: boolean\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'loading',\r\n    isInitialized: false\r\n}\r\nexport type AppStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\n\r\ntype ActionTypes =\r\n    | ReturnType<typeof setAppStatusAC>\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionTypes): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case SET_APP_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\nconst SET_APP_STATUS = 'SET-APP-STATUS'\r\n\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n\r\nexport const setAppStatusAC = (status: AppStatusType) => ({\r\n        type: SET_APP_STATUS,\r\n        status\r\n    }\r\n)","import {Dispatch} from 'redux'\r\nimport {API} from \"../api/API\";\r\nimport {setAppStatusAC, SetAppStatusActionType} from \"./app-reducer\";\r\nconst SET_CARDS_LIST = 'SET_CARDS_LIST'\r\n\r\nconst initialState: Array<any> = []\r\ntype CardType = any;\r\n// export type TodolistType = {\r\n//     id: string\r\n//     title: string\r\n//     addedDate: string\r\n//     order: number\r\n// }\r\n\r\nexport const cardsListReducer = (state: Array<CardsDomainType> = initialState, action: any): Array<any> => {\r\n    // debugger\r\n    switch (action.type) {\r\n\r\n\r\n        case SET_CARDS_LIST:\r\n            //debugger\r\n            // return state\r\n            return action.cardsList;\r\n            // return action.cardsList.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setCardsListAC = (cardsList: Array<CardType>) => ({type: SET_CARDS_LIST, cardsList} as const)\r\n\r\n\r\nexport type SetCardsListActionType = {\r\n    type: string\r\n    cardsList: Array<any>\r\n};\r\n// export type SetCardsListActionType = ReturnType<typeof setCardsListAC>;\r\n\r\ntype ActionsType =\r\n    | SetCardsListActionType\r\n    | SetAppStatusActionType\r\n\r\n\r\n\r\n// thunk\r\nexport const fetchCardsTC = () => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        API.getCards({})\r\n            .then((res) => {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(setCardsListAC(res))\r\n            })\r\n    }\r\n}\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type CardsDomainType = CardType & {\r\n    filter: FilterValuesType\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport Card from \"../Card/Card\";\r\nimport style from \"./Cards.module.css\"\r\nimport {fetchCardsTC} from \"../../redux/cards-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\nexport default function Cards() {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        //alert('Hello')\r\n        const thunk = fetchCardsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    // const cards = []\r\n    // for (let i = 0; i < 10; i++) {\r\n    //     cards.push(<Card id={i}/>)\r\n    // }\r\n\r\n    const cards = useSelector((state: any) => state.cardsList)\r\n\r\n\r\n\r\n    //const renderCards = cards.reduce((acc:string, val:any) => {return acc +=`<Card key={${val.id}} name={${val.name}}/>`}, \"\")\r\n\r\n    //debugger\r\n\r\n\r\n    return <div className={style.cards}>\r\n       {/*// {renderCards}*/}\r\n        {\r\n            cards.map((card : any) => {\r\n                return <Card key={card.id}\r\n                             name={card.name} />\r\n            })\r\n        }\r\n    </div>\r\n}","import React from 'react';\r\n\r\nfunction Header() {\r\n    return (\r\n        <div>The Header</div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\nimport './App.css';\nimport Cards from \"./components/Cards/Cards\";\nimport Header from \"./components/Header/Header\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Header/>\n            <Cards/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\"\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {cardsListReducer} from \"./cards-reducer\";\r\n\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n    appState: appReducer,\r\n    cardsList: cardsListReducer,\r\n})\r\n\r\n// вариант для работы с расширением (хрома) redux devtools:\r\n// @ts-ignore\r\nconst composeEnhancers = window['__REDUX_DEVTOOLS_EXTENSION_COMPOSE__'] as typeof compose || compose;\r\nconst store = createStore(\r\n    rootReducer,\r\n    /* preloadedState, */\r\n    composeEnhancers(applyMiddleware(thunkMiddleware))\r\n );\r\n\r\n\r\nexport type RootStateType = ReturnType<typeof rootReducer>\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}